// Code generated by goctl. DO NOT EDIT.
// Source: applet.proto

package server

import (
	"context"

	"go-zero-admin/application/applet/rpc/internal/logic/user"
	"go-zero-admin/application/applet/rpc/internal/svc"
	"go-zero-admin/application/applet/rpc/pb"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

// 获取用户信息
func (s *UserServer) GetUserInfo(ctx context.Context, in *pb.GetUserInfoRequest) (*pb.GetUserInfoResponse, error) {
	l := userlogic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

// 获取Token
func (s *UserServer) GetUserToke(ctx context.Context, in *pb.GetUserTokeRequest) (*pb.GetUserTokeResponse, error) {
	l := userlogic.NewGetUserTokeLogic(ctx, s.svcCtx)
	return l.GetUserToke(in)
}

// 分页获取用户列表
func (s *UserServer) GetUserList(ctx context.Context, in *pb.GetUserListRequest) (*pb.GetUserListResponse, error) {
	l := userlogic.NewGetUserListLogic(ctx, s.svcCtx)
	return l.GetUserList(in)
}

// 新增（注册）用户 - 管理员
func (s *UserServer) Register(ctx context.Context, in *pb.RegisterRequest) (*pb.RegisterResponse, error) {
	l := userlogic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// 修改用户信息
func (s *UserServer) UpdateUserInfo(ctx context.Context, in *pb.UpdateUserInfoRequest) (*pb.NoDataResponse, error) {
	l := userlogic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}

// 修改用户和角色的关系信息 -- 和上  在修改用户信息的时候请求
func (s *UserServer) UpdateUserAuthorities(ctx context.Context, in *pb.UpdateUserAuthoritiesRequest) (*pb.NoDataResponse, error) {
	l := userlogic.NewUpdateUserAuthoritiesLogic(ctx, s.svcCtx)
	return l.UpdateUserAuthorities(in)
}

// 重置用户密码 默认密码：goZero
func (s *UserServer) ResetUserPassword(ctx context.Context, in *pb.ResetUserPasswordRequest) (*pb.NoDataResponse, error) {
	l := userlogic.NewResetUserPasswordLogic(ctx, s.svcCtx)
	return l.ResetUserPassword(in)
}

// 删除用户
func (s *UserServer) DeleteUser(ctx context.Context, in *pb.DeleteUserRequest) (*pb.NoDataResponse, error) {
	l := userlogic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}
